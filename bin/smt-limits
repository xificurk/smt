#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Simple Monitoring Tool check limits script.

"""

__author__ = "Petr Morávek (petr@pada.cz)"
__copyright__ = "Copyright (C) 2012 Petr Morávek"
__license__ = "LGPL 3.0"

__version__ = "0.1.0"

import logging
from optparse import IndentedHelpFormatter, OptionGroup, OptionParser
import os.path

import smt



if __name__ == "__main__":
    # Setup console output logging
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt="%(asctime)s %(levelname)-8s %(name)s >> %(message)s", datefmt="%Y-%m-%d %X"))
    rootlog = logging.getLogger("")
    rootlog.addHandler(handler)
    rootlog.setLevel(logging.WARN)

    # Parse command line arguements
    optp = OptionParser(formatter=IndentedHelpFormatter(max_help_position=17), conflict_handler="resolve", usage="usage: %prog [options]", version="%prog "+__version__)
    optp.add_option("-q", "--quiet", help="set logging to ERROR", dest="loglevel", action="store_const", const=logging.ERROR, default=logging.WARN)
    optp.add_option("-v", "--verbose", help="set logging to INFO", dest="loglevel", action="store_const", const=logging.INFO)
    optp.add_option("-d", "--debug", help="set logging to DEBUG", dest="loglevel", action="store_const", const=logging.DEBUG)
    optp.add_option("-D", "--Debug", help="set logging to ALL", dest="loglevel", action="store_const", const=0)

    optp.add_option("--unknown-skip", help="number of allowed unknown values at the end of dataset (defaults to %default)", dest="unknown_skip", action="store", type="int", default=3)
    optp.add_option("--data-dir", help="directory where RRD and metadata files are stored (defaults to %default)", dest="data_dir", action="store", type="string", default="/var/lib/smt/data")
    optp.add_option("--state-dir", help="directory where the state of individual datasources is stored (defaults to %default)", dest="state_dir", action="store", type="string", default="/var/lib/smt/state")

    opts,args = optp.parse_args()
    rootlog.setLevel(opts.loglevel)

    data_dir = os.path.realpath(opts.data_dir)
    if not os.path.isdir(data_dir):
        log.critical("Invalid data directory {!r}.".format(opts.data_dir))
        raise SystemExit(1)

    state_dir = os.path.realpath(opts.state_dir)
    if not os.path.isdir(state_dir):
        log.critical("Invalid state directory {!r}.".format(opts.state_dir))
        raise SystemExit(1)

    print("old state   new state      value    datasource name")
    limits = smt.core.Limits(data_dir, state_dir, opts.unknown_skip)
    for name, (old_state, state, value, metadata) in limits.check_all().items():
        print("{:12}{:12}{:8.3g}    {}".format(old_state, state, value, name))
