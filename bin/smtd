#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Simple Monitoring Tool daemon.

Functions:
    run     --- Load plugins and run them.

"""

__author__ = "Petr Morávek (petr@pada.cz)"
__copyright__ = "Copyright (C) 2012 Petr Morávek"
__license__ = "LGPL 3.0"

__version__ = "0.1.2"

import imp
import logging
from optparse import IndentedHelpFormatter, OptionGroup, OptionParser
import os.path
import signal
import threading
import time

import smt


# Setup logging
logging.getLogger("").addHandler(logging.NullHandler())
log = logging.getLogger("smtd")


# Catch SIGTERM
def sigterm_handler(signum, frame):
    raise SystemExit()

signal.signal(signal.SIGTERM, sigterm_handler)


def run(plugins_dir):
    """
    Load plugins and run them.

    Arguments:
        plugins_dir --- Directory with plugins configuration, this is the path
                        used to search for plugins module.

    """
    stop = smt.core.Plugin.stop

    # Let's load the plugins
    try:
        fp = None
        fp, pathname, description = imp.find_module("plugins", [plugins_dir])
        plugins = imp.load_module("plugins", fp, pathname, description)
    except Exception as e:
        log.exception(e)
        log.critical("Could not find valid plugins module in {}".format(plugins_dir))
        raise SystemExit(1)
    finally:
        # Since we may exit via an exception, close fp explicitly.
        if fp:
            fp.close()

    try:
        filenames = set()
        pool = plugins.plugins
        for i in range(len(pool)):
            if not isinstance(pool[i], smt.core.Plugin):
                raise TypeError("{}th plugin ({}) is not an instance of smt.core.Plugin.".format(i+1, pool[i].__class__.__name__))
            for datasource in pool[i].datasources:
                filename = datasource.filename
                if filename in filenames:
                    raise RuntimeError("Duplicate datasource filename identifier {!r}.".format(filename))
                filenames.add(filename)
                datasource.check_files()
        if len(pool) == 0:
            log.warn("You have not specified any plugins.")
        elif len(filenames) == 0:
            log.warn("Specified plugins do not provide any datasources.")
    except Exception as e:
        log.exception(e)
        log.critical("Invalid plugin configuration in {}.".format(plugins_dir))
        raise SystemExit(1)

    # Start plugins and wait
    try:
        for plugin in pool:
            plugin.start()
        while not stop.wait(600):
            pass
    except KeyboardInterrupt:
        log.warn("Caught KeyboardInterrupt, stopping the daemon.")
        stop.set()
    except SystemExit:
        log.warn("Caught SystemExit, stopping the daemon.")
        stop.set()

    # Cleanup
    for plugin in pool:
        log.info("Waiting for plugin {} to finish.".format(plugin.name))
        plugin.join()


if __name__ == "__main__":
    # Setup console output logging
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt="%(asctime)s %(levelname)-8s %(name)s >> %(message)s", datefmt="%Y-%m-%d %X"))
    rootlog = logging.getLogger("")
    rootlog.addHandler(handler)
    rootlog.setLevel(logging.WARN)

    # Parse command line arguements
    optp = OptionParser(formatter=IndentedHelpFormatter(max_help_position=17), conflict_handler="resolve", usage="usage: %prog [options]", version="%prog "+__version__)
    optp.add_option("-q", "--quiet", help="set logging to ERROR", dest="loglevel", action="store_const", const=logging.ERROR, default=logging.WARN)
    optp.add_option("-v", "--verbose", help="set logging to INFO", dest="loglevel", action="store_const", const=logging.INFO)
    optp.add_option("-d", "--debug", help="set logging to DEBUG", dest="loglevel", action="store_const", const=logging.DEBUG)
    optp.add_option("-D", "--Debug", help="set logging to ALL", dest="loglevel", action="store_const", const=0)

    optp.add_option("--data-dir", help="directory where the generated data should be stored (defaults to %default)", dest="data_dir", action="store", type="string", default="/var/lib/smt/data")
    optp.add_option("--plugin-dir", help="directory with plugins configuration (defaults to %default)", dest="plugins_dir", action="store", type="string", default="/etc/smt")

    opts,args = optp.parse_args()
    rootlog.setLevel(opts.loglevel)

    data_dir = os.path.realpath(opts.data_dir)
    if not os.path.isdir(data_dir):
        log.critical("Invalid data directory {!r}.".format(opts.data_dir))
        raise SystemExit(1)
    smt.core.Datasource.data_dir = data_dir

    log.info("SMT daemon starting")
    run(opts.plugins_dir)
    log.info("SMT daemon exiting")
